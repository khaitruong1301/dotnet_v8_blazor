using System.Net;
using System.Security.Claims;
using System.Text;
using Blazored.LocalStorage;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.FileProviders;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using web_api_base.Models.dbebay;
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddControllers();

// Th√™m d·ªãch v·ª• cho Blazor Server
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();
// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();


// ƒê·ªçc connection string t·ª´ appsettings.json
var connectionString = builder.Configuration.GetConnectionString("ConnectionString");
//K·∫øt n·ªëi db
builder.Services.AddDbContext<EbayContext>(options => options.UseLazyLoadingProxies(false).UseSqlServer("Server=103.97.125.207,1433;Database=eBayDB;User Id=sa;Password=khaicybersoft123@;TrustServerCertificate=True;"));
//B·∫≠t giao di·ªán authentication 
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });
    // üî• Th√™m h·ªó tr·ª£ Authorization header t·∫•t c·∫£ api
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Nh·∫≠p token v√†o √¥ b√™n d∆∞·ªõi theo ƒë·ªãnh d·∫°ng: Bearer {token}"
    });

    // üî• ƒê·ªãnh nghƒ©a y√™u c·∫ßu s·ª≠ d·ª•ng Authorization tr√™n t·ª´ng api
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});



//Th√™m middleware authentication
var privateKey = builder.Configuration["jwt:Secret-Key"];
var Issuer = builder.Configuration["jwt:Issuer"];
var Audience = builder.Configuration["jwt:Audience"];
// Th√™m d·ªãch v·ª• Authentication v√†o ·ª©ng d·ª•ng, s·ª≠ d·ª•ng JWT Bearer l√†m ph∆∞∆°ng th·ª©c x√°c th·ª±c
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{        
        // Thi·∫øt l·∫≠p c√°c tham s·ªë x√°c th·ª±c token
        options.TokenValidationParameters = new TokenValidationParameters()
        {
            // Ki·ªÉm tra v√† x√°c nh·∫≠n Issuer (ngu·ªìn ph√°t h√†nh token)
            ValidateIssuer = true, 
            ValidIssuer = Issuer, // Bi·∫øn `Issuer` ch·ª©a gi√° tr·ªã c·ªßa Issuer h·ª£p l·ªá
            // Ki·ªÉm tra v√† x√°c nh·∫≠n Audience (ƒë·ªëi t∆∞·ª£ng nh·∫≠n token)
            ValidateAudience = true,
            ValidAudience = Audience, // Bi·∫øn `Audience` ch·ª©a gi√° tr·ªã c·ªßa Audience h·ª£p l·ªá
            // Ki·ªÉm tra v√† x√°c nh·∫≠n kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k√Ω token
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(privateKey)), 
            // S·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (`privateKey`) ƒë·ªÉ t·∫°o SymmetricSecurityKey nh·∫±m x√°c th·ª±c ch·ªØ k√Ω c·ªßa token
            // Gi·∫£m ƒë·ªô tr·ªÖ (skew time) c·ªßa token xu·ªëng 0, ƒë·∫£m b·∫£o token h·∫øt h·∫°n ch√≠nh x√°c
            ClockSkew = TimeSpan.Zero, 
            // X√°c ƒë·ªãnh claim ch·ª©a vai tr√≤ c·ªßa user (ƒë·ªÉ ph√¢n quy·ªÅn)
            RoleClaimType = ClaimTypes.Role, 
            // X√°c ƒë·ªãnh claim ch·ª©a t√™n c·ªßa user
            NameClaimType = ClaimTypes.Name, 
            // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n c·ªßa token, kh√¥ng cho ph√©p s·ª≠ d·ª•ng token h·∫øt h·∫°n
            ValidateLifetime = true
        };
});
//DI Service JWT
builder.Services.AddScoped<JwtAuthService>();
// Th√™m d·ªãch v·ª• Authorization ƒë·ªÉ h·ªó tr·ª£ ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
builder.Services.AddAuthorization();

//DI Repository,Service
//repo
builder.Services.AddScoped<IUserRepository,UserRepository>();
// builder.Services.AddScoped<IUserRoleRepository,UserRoleRepository>();
builder.Services.AddScoped<IRoleRepository,RoleRepository>();
builder.Services.AddScoped<IProductRepository,ProductRepository>();
builder.Services.AddScoped<IProductImageRepository,ProductImageRepository>();
builder.Services.AddScoped<IOrderRepository,OrderRepository>();
builder.Services.AddScoped<IOrderDetailRepository,OrderDetailRepository>();
builder.Services.AddScoped<IListingRepository,ListingRepository>();
//unitofwork
builder.Services.AddScoped<IUnitOfWork,UnitOfWork>();
//service
builder.Services.AddScoped<IUserService,UserService>();
builder.Services.AddScoped<IProductService,ProductService>();

//service http client
builder.Services.AddHttpClient();
//Add blazor storage
// builder.Services.AddServerSideBlazor();
builder.Services.AddBlazoredLocalStorage();

//S·ª≠ d·ª•ng httpcontext t·ª´ blazor server
builder.Services.AddHttpContextAccessor();


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.MapControllers();




//blazor    
app.UseStaticFiles();
app.UseRouting();
//Ph√¢n quy·ªÅn
app.UseAuthentication();
app.UseAuthorization();

app.MapBlazorHub(); // SignalR hub cho Blazor Server
app.MapFallbackToPage("/_Host"); // Trang m·∫∑c ƒë·ªãnh cho Blazor

app.Run();


